= foro

Forō (フォロー) is a gem to allow any model to follow the same model.  There is also built in support for blocking/un-blocking follow records. If you need a model that follows other models (user to follow users but also books) check https://github.com/tcocca/acts_as_follower on which this gem is based on.

Main uses would be for Users to follow other Users.

== Installation

=== The master branch supports Rails 4

Add the gem to the gemfile:
  gem "foro"

Run the generator:
  rails generate foro

== Usage

=== Setup

  class User < ActiveRecord::Base
    ...
    followable
	follower
    ...
  end

---

=== foro methods

To have an object start following another use the following:
  fox = User.find(1)
  duck = User.find(2)
  fox.follow(duck) # Creates a record for the fox as the follower and the duck as the followable

To stop following an object use the following
  fox.stop_following(duck) # Deletes that record in the Follow table

You can check to see if an object is following another object through the following
  fox.following?(duck) # Returns true or false

To get the total number (count) of follows for an object use the following
  duck.follow_count # Returns an integer

To get follow records that have not been blocked use the following
  duck.all_follows # returns an array of Follow records

To get all of the records that an object is following that have not been blocked use the following
  fox.all_following

There is now a method that will just return the Arel scope for follows so that you can chain anything else you want onto it:
  fox.follows_scoped
  
This does not return the actual follows, just the scope of followings including the followables, essentially:  fox.follows.unblocked.includes(:followable)

The following methods take an optional hash parameter of ActiveRecord options (:limit, :order, etc...)
  all_follows, all_following

To see is a model is followed by a model
  duck.followed_by?(fox)

  # Returns true if the current instance is followed by the passed record
  # Returns false if the current instance is blocked by the passed record or no follow is found

To block a follower call the following
  book.block(user)
  # Blocks the user from appearing in the followers list, and blocks the book from appearing in the user.all_follows or user.all_following lists

To unblock is just as simple
  book.unblock(user)

To get all blocked records
  book.blocks # Returns an array of blocked follower records (only unblocked)

If you only need the number of blocks use the count method provided
  book.blocked_followers_count

Unblocking deletes all records of that follow, instead of just the :blocked attribute => false the follow is deleted.  

=== Follow Model

The Follow model has a set of named_scope's.  In case you want to interface directly with the Follow model you can use them.
  Follow.unblocked # returns all "unblocked" follow records

  Follow.blocked # returns all "blocked" follow records

  Follow.descending # returns all records in a descending order based on created_at datetime

This method pulls all records created after a certain date.  The default is 2 weeks but it takes an optional parameter.
  Follow.recent
  Follow.recent(4.weeks.ago)

Follow.for_follower is a named_scope that is mainly there to reduce code in the modules but it could be used directly.  It takes an object and will return all Follow records where the follower is the record passed in.  Note that this will return all blocked and unblocked records.
  Follow.for_follower(user)
If you don't need the blocked records just use the methods provided for this:
  user.all_follows
  # or
  user.all_following

Follow.for_followable acts the same as its counterpart (for_follower).  It is mainly there to reduce duplication, however it can be used directly.  It takes an object that is the followed object and return all Follow records where that record is the followable. Again, this returns all blocked and unblocked records.
  Follow.for_followable(duck)
Again, if you don't need the blocked records use the method provided for this:
  duck.followers
If you need blocked records only
  duck.blocks
